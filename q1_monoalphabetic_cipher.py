import matplotlib.pyplot as plt
import string

def shift_cipher_decoder(encrypted_string):
    for shift in range(1, 26):
        # Each letter is shifted by converting the character to its Unicode value and then adding the shift
        # to the unicode value. A special operation involving 65 and modulo 26 is required since capital
        # letters start from 65 and to prevent the shifted letters from displaying unicode letters outside
        # the capital letter range (65~90)

        shifted_message = ''.join(chr((ord(letter) - shift - 65) % 26 + 65) for letter in encrypted_string)
        print(shift, shifted_message)


def letter_frequency_histogram(encrypted_string):
    letter_dict = {}
    for alphabet in string.ascii_uppercase:
        letter_dict[alphabet] = encrypted_string.count(alphabet)

    plt.bar(letter_dict.keys(), letter_dict.values())
    plt.xlabel("Letter")
    plt.ylabel("Frequency")
    plt.title("Letter Frequency Analysis")
    plt.show()
    print(letter_dict)

def bigram_frequency(encrypted_string):
    bigram_dict = {}
    for i in range(0, len(encrypted_string) - 1):
        bigram = encrypted_string[i:i+2]
        if '-' in bigram:
            continue
        if bigram_dict.get(bigram) is None:
            bigram_dict[bigram] = encrypted_string.count(bigram)

    sorted_dict = dict(sorted(bigram_dict.items(), key=lambda bigram: bigram[1], reverse=True))
    for key, val in sorted_dict.items():
        print(key, val)

def trigram_frequency(encrypted_string):
    trigram_dict = {}
    for i in range(0, len(encrypted_string) - 1):
        bigram = encrypted_string[i:i+3]
        if trigram_dict.get(bigram) is None:
            trigram_dict[bigram] = encrypted_string.count(bigram)

    sorted_dict = dict(sorted(trigram_dict.items(), key=lambda bigram: bigram[1], reverse=True))
    for key, val in sorted_dict.items():
        print(key, val)

def substitute(string):
    dict = {
        "O": "E",
        "T": "T",
        "Q": "H",
        "I": "A",
        "A": "I",
        "P": "S",
        "V": "N",
        "B": "O",
        "N": "M",
        "X": "G",
        "M": "D",
        "G": "C",
        "E": "W",
        "Y": "U",
        "D": "L",
        "R": "Y",
        "L": "J",
        "J": "P",
        "C": "B",
        "W": "R",
    }
    replaced_string = ""
    for letter in string:
        if dict.get(letter):
            replaced_string += dict.get(letter)
        else:
            replaced_string += letter

    print(replaced_string)
    return replaced_string

# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    problem_1_encrypted_string = "VBTTQOPINOTQAVXICATPIAMTQOQITTOWMBTRBYNAXQTLYPTIPEODDPIRTQITAPOOEQITAOITAPTQOPINOTQAVXIPAOITEQITAPOORBYNAXQTLYPTIPEODDPIRGBNNIIMMOMTQONIWGQQIWOGBNNITQITADAKOEQITAXOTAPTQOPINOTQAVXIPAXOTEQITADAKORBYNAXQTLYPTIPEODDPIRGBNNIIMMOMTQOMBWNBYPOGBNNIEQBPOONOMTBCOTIDKAVXAVQAPPDOOJGBNNITQITACWOITQOEQOVAPDOOJAPTQOPINOTQAVXIPAPDOOJEQOVACWOITQOATAPTQOPINOTQAVXEATQRBYGBNNIPIAMTQOQITTOWGBNNIIVMQOWOTQOGBVSOWPITABVMWBJJOMGBNNIIVMTQOJIWTRPITPADOVTUBWINAVYTOGBNNIEQADOIDAGOTQBYXQTBSOWIDDPQOGBYDMWONONCOWICBYTWISOVPIVMEWATAVXMOPKPGBNNIEQAGQEIPVTNYGQ"
    problem_2_encrypted_string = "KGGIKGYUYKCIVUVZGIMBWQVBKCLQCIRAGKOVKFRANDVYXEWDZYNPAWGIMHXYVLWTMRLCGIAXKIQIZLGIXZKMNPVUIKBQSIXERTGIKENHFBFTKIYKQZESYMWDMXKHIPCLCLUVCLGIKEBQOPVSKRPUFNGIKFDHWTLCGKAKYGCBHQYGNKCTUYYMLZIFRAKOZOPVBCGNKMVZCPVUPNRALCCYZLGRXELVVPKMGIXEWDZYWMSIFIRKVUCIRANDVYXECBMXQZESYMQAKTRGKIFKVDXEMWXAFBGYNDTGRAAVMHXYKXYMRMLZIDXEVUGTKCYGVBWDMFKTAKMPGDXEWYNMKFVUITUYKMVLWTQZESYMLCLCQZESYMWDMXKHRSVUGNAXVTFPCLCLRAKYXEYGIUKIEMSIMWNIRAFHKMLCQRQBLCFALNKQNICYKWWMWMHWKCVUPNRAOTUBMRGIMRZBZVQZESYMVLTNMRKIQZESYMKWMDCPGIKAKEQKEXPZFBVBKCGIMFZQAKLCGRXEVIMXUMCLKWMUZQUYYMNHGILCLCFICLIKWTYGCBPWLOXEVBXYDHSIRAIZUYYMWDMXGKIFMRCBRAIHZOIXKEVUFNGIXEAXXEMXYRXEYGVZMHBWKMVXKOUYYMSOIKPIHVBCFNGKAKRAVFCBPGZLKCIPRACBMFYHMRNHGIEKFBVLSXIHTNUMCLNHGIKCMWVQIFIKYKWDAXMWQWTYKCLWIHNMVBLCQWIVGIXZKYXEYGIUKIKOUYYMRADXVTRYDXVQMXIKCNTVWTYKEZIHVBCBGIAREHIUUYYMEKFBVLXHQYVSMRVUFNGIMXCSWDCBYXIHHAGKSIGIYXHIMUWMWTBSXZKFVBQZESYMKWRSVUVZGIMVHVBCGTXZYFXKEHVBBUWYHMBMZOKDHAFNGIKCAMTVFNGFAFHIGBZOPVQAQVMHXYKXUPRSRMBTABDHNMMRWQMEREUYRAVZSWQZCSFIEMSIXMPIQBCKCIRAKDMULCGENPHEWTYFKWRSVUPNRAQWBNUPDFIHXMIUUYYMMWWDAXYGAKHMVLWTQZESYMLCXMARQBFDKFLKGIKZZOCIVEQWWMOLCPRAIVCLGIXEAXXEKXKMGTKXZKWMFNGIMXHVMXZLGIXEQYIUUYYMGMKCFKHMHMKCLKOVZMQZVLIZUYYMKWVSKECBIPRAASXEXRRKPVBUTPHEKCKWVRAFKFYWFYNDWKSOSIKWZKVUFKRHRMCIVBGIKYCSQINKWBXAEXLQUVGEDEXEWMSIYWFYLCHEDNYFEHFAZIULUMCLCBZKKCWQDHFYWDAXZOPVGMBNWMVQPUKZUYYMKWIPRAFMULFYQKYKZOFNLCVLCYKGRAHESIOLBGQBMWWDAXKXLNELZVYRXEBLXKNCAXWDARMHXYKXGIKYKMWBZLRMNPVZKVWTGIAXKTAKHSKIQIKWMUKFIKWTGIKYREXZXRVZYSCBHMFAVUFNGIARZOXMBUTGRASPCTIAKCBSXEYZRSVPZBCYKCPHXAFBTVWTNUUYYMLZEXKQAQMWVZCSIUUYYMNHGIYWHTVUYKLZHEVZZLVUGKFBGBXEMFKHCIMROVZMQZESYMLZIHCIDHNUZOCIVEZLGIXZKMNPOVZMQWNPRAGEYLIHFKQZVLIVCLLCQWIVYRKXKCTQUYYMQAKXVUVZGIABMWIKEXHSKIRWRAVFCBHQYGAMSIXYHWCIQBCBRMHXRAEXWDMXVQOPMDMWNPRACKHAITUYYMWDKZMYKFQYVQPUXEKGRAVFEHFAIFAWCIRAEXNPVULCCIRAFHXZKXGYSWXYLZEXKIYMBKYKWKSIBQYKWSXEMRKWTKWTVUGTHRYFKIGFXRHVVPXEUDGYEKHMBPZOVPEMUDUBNDOVKZUYYMKWIPRAFMULFYXAEXGYQPDHWTKWMUKCTHWTQZESYMQAVTKMNVPGYWFYXKEHOBQWBPQYRMHSKIDVYFKTVCPURECDPNKWISCPNUUYYMTDMXKWIUMAMXQZESYMKWMSKWBLGIXELQUVGIKCPWLCKMPICLGIMFYZLFAFEXKFMRVUVZGIEAKCVPKOUYYMKWVHBIKIMRRAIFUBPDFMHESILCGMBNNPRACKHAGNKIIGRAEPZVGIDNQWNPRAVQYKZLCBYZTGRAIHQIMXPKCSQINKWBKCGIYFKWIUUYYMKWVDDNRERKSIBSXEAFKGRAEXHSKIRWDHKPZQYFYXHEFKGIKREREXMRUYREUYGIYXCBHMFAZLGIAXKTAKHSKIQIVUPIZVCLVAKGKMRAEHLKUPFSFMHESIQWBSKHFKMPLUWXKLRAIHQISPCTIAKCDHSUYFTZUYYMQAUBKXMYAXMWOLUHCLGIKXWDMXKGPDCBMWKFFKKMSIQWITRAIPRAFMULFYHMCTMRCLQAKXOLUWWQRADXVTRYDXVQMXRAWMHVQZESYMBLPSPULNKMFHKMPNZVZKEXBNUMCLQAEMNMMRGIAFHIPVCLXYQKPUKEZOXAEHNDVYXEWDZYWMSIAWRYNKFBFYIPRANHTNMRNHITDVCLXYNDRMNUUYYMBLQDYHAXDHFKKCBLZDREZQNTUYYMKWVUBTABKIQIMXKWMUZVZKEXBNXMBSKMHXDHFK"


    # shift_cipher_decoder(encrypted_string)
    letter_frequency_histogram(problem_2_encrypted_string)
    # bigram_frequency(hyphenated)
    # trigram_frequency(encrypted_string)
    # substitute(encrypted_string)

